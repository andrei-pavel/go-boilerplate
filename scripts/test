#!/bin/bash

# Copyright (C) 2017-2018 Andrei Pavel, andrei.pavel@cti.pub.ro
# Licensed under the MIT License

# Get script path and append it to PATH so other scripts are callable.
SCRIPT_PATH="$(dirname "$(readlink -f "${0}")")"
PATH="${PATH}:${SCRIPT_PATH}"

# Header
ARGUMENTS="\
  [-wd|--with-docker]          run tests on Docker
  \$hosts                       hosts to deploy to
"
. "${SCRIPT_PATH}/lib/header"
. "${SCRIPT_PATH}/lib/utils"

# Parse arguments.
with_docker=false
while (( ${#} > 0 )); do
  case "${1}" in
  # [-wd|--with-docker]          run tests on Docker
  '-wd'|'--with-docker') with_docker=true ;;
  *) hosts+=" ${1}"
  esac; shift
done

# Get toplevel path.
pushd "${SCRIPT_PATH}" 1> /dev/null
{
  GOPATH=$(git rev-parse --show-toplevel)
}
popd 1> /dev/null

# Export Go variables.
GOBIN=${GOPATH}/bin
export GOPATH
export GOBIN

pushd "${GOPATH}" 1> /dev/null
{
  if ${with_docker}; then
    if (( ${#hosts} == 0 )); then
      # Locally

      # Make sure network exists.
      network="$(docker network ls -q --filter 'name=Network-Boilerplate')"
      if [[ -z "${network}" ]]; then
        docker network create 'Network-Boilerplate'
      fi

      # Build and run.
      pushd './scripts/docker/test' 1> /dev/null
      {
        docker-compose up --build --abort-on-container-exit --force-recreate
      }
      popd 1> /dev/null
    else
      # Remotely
      root_directory="$(basename "${GOPATH}")"
      for host in ${hosts}; do
        scripts/rsync-synchronize "./" "${host}:${root_directory}/"
        ssh "${host}" "\
          cd \"${root_directory}\"
          scripts/test $(additional)
        "
      done
    fi
  else
    directories=$(find src -type d | sort -V)  # sort for same order on subsequent runs
    for directory in ${directories}; do
      if [[ ${directory} == *"github.com"* ]]; then
        continue
      fi
      if [[ ${directory} == *"golang.org"* ]]; then
        continue
      fi
      if [[ ${directory} == *"gopkg.in"* ]]; then
        continue
      fi
      pushd ${directory} 1> /dev/null
      {
        go test -args --config "${GOPATH}/config.yaml" || true
      }
      popd 1> /dev/null
    done
  fi
}
popd 1> /dev/null
