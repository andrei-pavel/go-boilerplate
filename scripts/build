#!/bin/bash

# Copyright (C) 2017-2018 Andrei Pavel, andrei.pavel@cti.pub.ro
# Licensed under the MIT License

# Header
ARGUMENTS="\
  [\$architecture]              architecture to build for i.e. 'arm',
                               'windows', otherwise build natively
  [-o|--old]                   build the old way with exporting GOPATH
"
SCRIPT_PATH="$(dirname "$(readlink -f "${0}")")"
. "${SCRIPT_PATH}/lib/header"
. "${SCRIPT_PATH}/lib/spinner"

# Parse arguments.
while (( ${#} > 0 )); do
  case "${1}" in
  # [-o|--old]                   build the old way with exporting GOPATH
  '-o'|'--old') old=true ;;
  *)
    # [\$architecture]              architecture to build for i.e. 'arm',
    #                              'windows', otherwise build natively
    [[ -z "${architecture+x}" ]] && architecture="${1}" && shift && continue
    # Unrecognized argument
    printf "${RED}ERROR: Unrecognized argument '%s'${RESET}\\n" "${1}" 1>&2; print-usage; exit 1 ;;
  esac; shift
done

# Default arguments
[[ -z "${old+x}" ]] && old=false

function build() {
  if [[ -z "${architecture+x}" ]]; then
    start-spinner 'Building...'
    go build -v
  elif [[ ${architecture} == "arm" ]]; then
    start-spinner 'Building for Linux ARM...'
    env GOOS=linux GOARCH=arm GOARM=6 go build -v
  elif [[ ${architecture} == "windows" ]]; then
    start-spinner 'Building for Windows...'
    env GOOS=windows GOARCH=amd64 go build -v
  fi
  stop-spinner ${?}
}

function import-dependencies() {
  return  # function deprecated, switched to Go modules
  pids=()
  for repository in $(printf '%s' "${repositories}"); do
    if [[ ! -d "src/${repository}" ]]; then
      start-spinner "Getting ${repository}..."
      go get -u "${repository}" # & pids+=(${!})
      stop-spinner "${?}"
    fi
  done
  for pid in "${pids[@]}"; do
    wait "${pid}"
  done
  go clean -r
}

# Export Go variables.
if ${old}; then
  . "${SCRIPT_PATH}/go-env"
  # Define repositories to import.
  repositories="$(cat \
<<HERE_DOCUMENT
github.com/go-yaml/yaml
HERE_DOCUMENT
  )"
fi


pushd "$(git rev-parse --show-toplevel)" 1> /dev/null
{
  if ${old}; then
    # Make sure all dependencies are imported.
    import-dependencies
  else
    # Make sure all dependencies are up to date.
    start-spinner 'Getting latest dependencies...'
    go get -u
    stop-spinner ${?}
  fi

  # Build.
  build
}
popd 1> /dev/null
