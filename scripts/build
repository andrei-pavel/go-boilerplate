#!/bin/bash

# Copyright (C) 2017-2018 Andrei Pavel, andrei.pavel@cti.pub.ro
# Licensed under the MIT License

# Header
ARGUMENTS="\
  [\$architecture]              architecture to build for i.e. 'arm',
                               'windows', otherwise build natively
"
SCRIPT_PATH="$(dirname "$(readlink -f "${0}")")"
. "${SCRIPT_PATH}/lib/header"
. "${SCRIPT_PATH}/lib/spinner"

# Parse arguments.
while (( ${#} > 0 )); do
  case "${1}" in
  *)
    # [\$architecture]              architecture to build for i.e. 'arm',
    #                              'windows', otherwise build natively
    [[ -z ${architecture+x} ]] && architecture="${1}" && shift && continue
    # Unrecognized argument
    printf "${RED}ERROR: Unrecognized argument '%s'${RESET}\\n" "${1}" 1>&2; printUsage; exit 1 ;;
  esac; shift
done

function build() {
  if [[ -z ${architecture+x} ]]; then
    start_spinner 'Building...'
    go build -v
  elif [[ ${architecture} == "arm" ]]; then
    start_spinner 'Building for Linux ARM...'
    env GOOS=linux GOARCH=arm GOARM=6 go build -v
  elif [[ ${architecture} == "windows" ]]; then
    start_spinner 'Building for Windows...'
    env GOOS=windows GOARCH=amd64 go build -v
  fi
  result=${?}
  stop_spinner ${result}
}

function import_dependencies() {
  pids=()
  for repository in $(printf '%s' "${repositories}"); do
    printf '%s\n' "Getting ${repository}..."
    go get -u "${repository}/..." # & pids+=(${!})
  done
  for pid in "${pids[@]}"; do
    wait "${pid}"
  done
  go clean -r
}

# Export Go variables.
. "${SCRIPT_PATH}/go-env"

# Define repositories to import.
repositories="$(cat <<EOF
github.com/go-yaml/yaml
EOF
)"

pushd "${GOPATH}" 1> /dev/null
{
  # Build.
  build || result=${?}

  if (( result != 0 )); then
    # Import all repositories asynchronously.
    import_dependencies

    # Build again.
    build || true
  fi
}
popd 1> /dev/null
